"""
Part 1: Discussion

1. What are the three main design advantages that object orientation
   can provide? Explain each concept.

   The three main design advantages that object orientation can provide 
   are abstraction, encapsulation, and polymorphism. When collaborating with large groups of people, abstraction allows us to work with large pieces of code while hiding details that we don't need. Encapsulation allows us to organize 
   our code in order to keep objects next to the data that they are related to.
   Polymorphism is the art of having a piece of code that can be re-used and customized in different ways.

2. What is a class? A class is a collection of methods and attrbutes that controls
how an "object" is created.

3. What is an instance attribute?
   An instance attribute is an attribute that only exists on an class instance.

4. What is a method?
A method is a sequence of statements that are used to perform a desired operation. An object instance must be available before we can use methods.

5. What is an instance in object orientation?
An instance (in object oriention) refers to the object that is created by the __init__ method within the class.

6. How is a class attribute different than an instance attribute?
   Give an example of when you might use each.

   A class attribute is an attribute that pertains to the class itself.
   An instance attribute is an attribute that is set directly on the object. For example, for a "Cat" class, a class attribute might be hunger, since all cats
   get hungry. However, "green eyes" can be considered to be an instance attribute
   because some cats have green eyes but not all cats have green eyes.

"""


# Parts 2 through 5:
# Create your classes and class methods

class Student(object):
    def __init__(self,first_name,last_name,address):
        self.first_name = first_name
        self.last_name = last_name
        self.address = address

class Exam(object):
    def __init__(self,name):
        self.name = name
        self.questions = []

    def add_question(self, question, correct_answer):
        new_question = Question(question, correct_answer)
        self.questions.append(new_question)

    def administer(self):
        score = 0
        #loop through each question of exam
        for question in self.questions:

            # call ask_and_evaluate function and check if user_answer is True
            if question.ask_and_evaluate():

            # if so, increment the score
                score +=1           

        return score

# if parameter list is empty, this class will have default parent of "object"
class Question():
    def __init__(self,question,correct_answer):
        self.question = question
        self.correct_answer = correct_answer

    def ask_and_evaluate(self):
        user_answer = raw_input(self.question + " > ")
        if self.correct_answer == user_answer:
            return True
        else:
            return False
        #return True or False depending if user answer is correct or not

class Quiz(Exam):
    def administer(self):
        # call Exam administer and get score
        # we use super to call our parent's method when the child has overridden it
        score = super(Quiz, self).administer()
        
        # Use that score and the total number of questions to see if they pass or fail
        score_percentage = float(score) / len(self.questions) 
        
        # if score_percentage is 50% or more, student passes quiz
        return score_percentage >= 0.5



# exam and student are lower-case because they are class objects
def take_test(exam, student):

    # administer exam first, then assign to student.score
    student.score = exam.administer()

def example():
    #by creating an exam object, we can access methods and all attributes in Exam class
    exam = Exam("final")
    exam.add_question("What color is the sky?", "Blue")
    exam.add_question("Where is the Golden Gate Bridge?", "San Francisco")
    exam.add_question("What is the name of our current president?", "Obama")

    student = Student("Betty", "White", "123 Dunder Alley")
    take_test(exam, student)

    print "Your score was: " + str(student.score)

def example2():
    #by creating an quiz object, we can access methods and all attributes in Quiz class
    quiz = Quiz("final")
    quiz.add_question("What color is the sky?", "Blue")
    quiz.add_question("Where is the Golden Gate Bridge?", "San Francisco")
    quiz.add_question("What is the name of our current president?", "Obama")

    student = Student("Betty", "White", "123 Dunder Alley")
    take_test(quiz, student)

    print "Your score was: " + str(student.score)


example2()





    